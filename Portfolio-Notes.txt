2nd Submit
************Java Collections****************************************

Youtube: http://youtu.be/gob5Cehrw6I
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/JSON-Serialization
************************************************************************************************************

************Application Controller Model****************************************

Youtube: http://youtu.be/gob5Cehrw6I
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/JSON-Serialization
************************************************************************************************************

************JUnit Testing****************************************
Used http://junit.org/junit4/ and http://www.tutorialspoint.com/junit/junit_overview.htm for my reseach points here.

JUnit testing is a framework used by devleopers to improve their quality of programing by learning which parts of the
application can be changed to increase speed and decrease resource needs to make the application as useful as possible.

I think of this as a benchmark tool. You write your code, just the JUnit testing framework to see how your program executes,
make changes that you think will improve your program (i.e. different methods using less cycles) and then run the testing
again and see if there's a difference. However manual testing take a lot of human resource and investment to try to 
continuously run and improve the code. Using the automated tool support, this making the testing run more accurately with
less time, and can become very sophisticated to bring out hidden information.

The testing environment thinks..."first testing, then coding" which makes a lot of since in my point of view. First, to make a test, you have to think of a test case...like a calulator adding up 6+1+3, which should equal ten.

So first you create the test..see: https://github.com/Urednick-Brandon/CIT360-Portfolio/JUnits/CalculatorTest.java
Then create the calculator: https://github.com/Urednick-Brandon/CIT360-Portfolio/JUnits/Calculator.java

Now when you compile the cacluator and the test, then run the test. you should get a time and if it passes your evlaulation.
You can always experiement to see if you get a faster time, and if it still evaluates your test case properly, if it doesn't
evaluate the test case as expected you'll get a failling message.

This is just a basic example of Junit testing, but you can test for a time-out, or execptions, or the new parameterized testing.

Assertions allow you to test for certain results, like in our calculator if it equals something, or if the output is true/false,
null/notNull, same as an expected output, or not the same, or even an ArraryEquals.

Youtube: 
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/JUnits
************************************************************************************************************

************Sockets****************************************
Instantly landed here, and was a great resouce to help me understand sockets. 
https://docs.oracle.com/javase/tutorial/networking/sockets/

A socket is an endpoint of a two-way communication link between two programs. This typically being a client and a server. 

Server-side: This server runs with a specific name and listens on a specific port waiting for a socket request. And from here
it just waits and waits and waits. Like a dog waiting at the door for someone to knock on it.

Client Side: The application knows what the server name is exactly (or the exact IP address) and which port on what the
server is listening on. Think like a house, with many doors leading into it. The sever name is like the house address and the
port number tells the client which door to knock on. When making the request, the client also identifies itself to the sever
so the sever can bind that connection to a local port number during the session.

When its all done correcty, the server gets a new socket bound to the same local port and also has its remote endpoint set to the address and the port of the client. (Known as a handshake). It moves the connection to a new socket so the sever can keep on listening for additional incomming requests.

See github example, for client socket reading/writing and server reading/writing.

Youtube: 
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/Sockets
************************************************************************************************************



************Threads-Runnable-Exectors-Handlers****************************************
Researched compiled from several different sources. http://stackoverflow.com/questions/21194762 Helped me understand that
these four terms all work together and not seperate. https://developer.android.com/reference/java/util/concurrent/Executor.html
also helped me understand how how it all works and I was able to implement a working example of the whole thing. 
https://developer.android.com/reference/java/lang/Runnable.html did the same as well.

Threads - A seperate execution stack from the main thread, very consuming on resources
Runnable - Implemented by any class intending to be executed by a thread
Executor - Executes the runnable task
Handler - Relays message from the thread queue.

Youtube: http://youtu.be/h6Q6fiw4_ns
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/Threads-Runnable-Exectors-Handlers
************************************************************************************************************

************JSON Serialization****************************************
This is basically taking data from an object and then putting it into a standard form so that it can be transmitted
and then translated back into the class it was intended for. Used https://msdn.microsoft.com/en-us/library/bb410770(v=vs.110).aspx
and http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonSerializer.htm and http://stackoverflow.com/questions/3316762/what-is-deserialize-serialize-in-json for my reseach as well as using https://en.wikipedia.org/wiki/Serialization to help understand the
uses of serialization. There's a coded example of JSON Serialization below.

Youtube: http://youtu.be/gob5Cehrw6I
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/JSON-Serialization
************************************************************************************************************

Portfolio Notes 1st Submit
************Hibernate***************************************************************************************
I stayed away from this topic because of my weak programming skills and my lack of knowledge on the subject. Once I finally got
into the subject I realized how important Hibernate is for taking variable data objects and helping them convert in to a SQL table
that can be used without having to rewrite the SQL code every single time you make a small change to the java classes. My research was
based on http://www.tutorialspoint.com/hibernate/ where I went through and learned the levels that Hibernate uses to make its magic
happen. I also watched several series of Youtube videos to help me understand point that I wasn't quite getting such has the
persistant classes. I even followed the tutorial and was able to make my first hibernate program and was able to follow it
and understood what it did. I did a presentation on the subject to the group as well.
Youtube: https://www.youtube.com/watch?v=nPunAaoIqpc
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/hibernate
************************************************************************************************************

************ HttpURLConnection*******************************************************************************
Here I studied various websites on how HTTP connections can be done in java for andriod devices and what you can do with them.
The main source that I did for this research was http://developer.android.com/reference/java/net/HttpURLConnection.html and
from there I was able to learn on how to connect with http urls with java in various different ways including secure connections,
cookies, and authentication sign-ons. I found other tools within the HttpURLConnection to also create a HTTP reader than can pull the
live current http file of any website. The java file is on this github at:
https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/HTTPreader
I also did a live demo of it on YouTube at (already cued up at 5m55s):
https://youtu.be/i7FmQZW6gMo?t=5m50s
************************************************************************************************************

************ MVC + JUnits? + Action-Listeners?**************************************************************
I somewhat understood was MVC was and how the business, input, and display layers all work. It took me a few times to grasp the
concept, but the tutuorials at W3schools really healped: http://www.w3schools.com/aspnet/mvc_intro.asp

From there I found a few more tutorials that helped build and demonstrate a live demo of a MVC and how it worked. I attempted to elevate 
the demo project and tried to make it so you can adjust the pixel size of your 'drawing', however that attempt had to be commented out
due to some compling issues that I still haven't worked out yet. 
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/mvc
YouTube Demo: https://www.youtube.com/watch?v=4gGolm8Zzfc

The cool thing about this demo tutorial file is that taught me about how JUnits can work and how to program something with action
listeners. I was someone familiar with action-listers when I programmed mods for World of Warcraft. The listeners wait, or constantly
check for an event to fire off, when it does, the listener tiggers and action function in response to the event. JUnits allows us to 
embed objects and values within parts of the UI that when coupled with an action-listener, will cause the view to change for us.
***********************************************************************************************************
