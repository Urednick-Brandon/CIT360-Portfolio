2nd Submit
************Threads-Runnable-Exectors-Handlers****************************************
Researched compiled from several different sources. http://stackoverflow.com/questions/21194762 Helped me understand that
these four terms all work together and not seperate. https://developer.android.com/reference/java/util/concurrent/Executor.html
also helped me understand how how it all works and I was able to implement a working example of the whole thing. 
https://developer.android.com/reference/java/lang/Runnable.html did the same as well.

Threads - A seperate execution stack from the main thread, very consuming on resources
Runnable - Implemented by any class intending to be executed by a thread
Executor - Executes the runnable task
Handler - Relays message from the thread queue.

Youtube: http://youtu.be/h6Q6fiw4_ns
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/Threads-Runnable-Exectors-Handlers
************************************************************************************************************

************JSON Serialization****************************************
This is basically taking data from an object and then putting it into a standard form so that it can be transmitted
and then translated back into the class it was intended for. Used https://msdn.microsoft.com/en-us/library/bb410770(v=vs.110).aspx
and http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonSerializer.htm and http://stackoverflow.com/questions/3316762/what-is-deserialize-serialize-in-json for my reseach as well as using https://en.wikipedia.org/wiki/Serialization to help understand the
uses of serialization. There's a coded example of JSON Serialization below.

Youtube: http://youtu.be/gob5Cehrw6I
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/JSON-Serialization
************************************************************************************************************

Portfolio Notes 1st Submit
************Hibernate***************************************************************************************
I stayed away from this topic because of my weak programming skills and my lack of knowledge on the subject. Once I finally got
into the subject I realized how important Hibernate is for taking variable data objects and helping them convert in to a SQL table
that can be used without having to rewrite the SQL code every single time you make a small change to the java classes. My research was
based on http://www.tutorialspoint.com/hibernate/ where I went through and learned the levels that Hibernate uses to make its magic
happen. I also watched several series of Youtube videos to help me understand point that I wasn't quite getting such has the
persistant classes. I even followed the tutorial and was able to make my first hibernate program and was able to follow it
and understood what it did. I did a presentation on the subject to the group as well.
Youtube: https://www.youtube.com/watch?v=nPunAaoIqpc
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/hibernate
************************************************************************************************************

************ HttpURLConnection*******************************************************************************
Here I studied various websites on how HTTP connections can be done in java for andriod devices and what you can do with them.
The main source that I did for this research was http://developer.android.com/reference/java/net/HttpURLConnection.html and
from there I was able to learn on how to connect with http urls with java in various different ways including secure connections,
cookies, and authentication sign-ons. I found other tools within the HttpURLConnection to also create a HTTP reader than can pull the
live current http file of any website. The java file is on this github at:
https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/HTTPreader
I also did a live demo of it on YouTube at (already cued up at 5m55s):
https://youtu.be/i7FmQZW6gMo?t=5m50s
************************************************************************************************************

************ MVC + JUnits? + Action-Listeners?**************************************************************
I somewhat understood was MVC was and how the business, input, and display layers all work. It took me a few times to grasp the
concept, but the tutuorials at W3schools really healped: http://www.w3schools.com/aspnet/mvc_intro.asp

From there I found a few more tutorials that helped build and demonstrate a live demo of a MVC and how it worked. I attempted to elevate 
the demo project and tried to make it so you can adjust the pixel size of your 'drawing', however that attempt had to be commented out
due to some compling issues that I still haven't worked out yet. 
Github: https://github.com/Urednick-Brandon/CIT360-Portfolio/tree/master/mvc
YouTube Demo: https://www.youtube.com/watch?v=4gGolm8Zzfc

The cool thing about this demo tutorial file is that taught me about how JUnits can work and how to program something with action
listeners. I was someone familiar with action-listers when I programmed mods for World of Warcraft. The listeners wait, or constantly
check for an event to fire off, when it does, the listener tiggers and action function in response to the event. JUnits allows us to 
embed objects and values within parts of the UI that when coupled with an action-listener, will cause the view to change for us.
***********************************************************************************************************
